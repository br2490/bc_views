<?php
$_bc_views_solr_view = array();
/**
 * Implements hook_node_info().
 */
function bc_views_node_info() {
  $items = array(
    'bc_views_solr_view' => array(
      'name' => t('Barnard Collection View'),
      'base' => 'node_content',
      'description' => t('A content type to configure and display a collection by a specifying a SOLR query. <em>Collection</em> here is used loosely, as these pages may be curated exhibits, special projects, timely (or time-based) collections, etc.  '),
      'has_title' => '1',
      'title_label' => t('Collection Name (Page Name)'),
      'help' => t('Use this page to configure and display a collection by a specifying a SOLR query.<br><em>Collection</em> here is used loosely, as these pages may be curated exhibits, special projects, timely (or time-based) collections, etc. <br> Use the <strong>Preview</strong> button to preview what the page will look like with results from the SOLR query your specified.'),
      'custom' => '0',
    ),
  );
  drupal_alter('node_info', $items);
  return $items;
}

/**
 * Implements hook_form()
 */
function bc_views_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_form_alter()
 */
function bc_views_form_alter(&$form, $form_state, $form_id) {
	if ($form_id == 'bc_views_solr_view_node_form') {

	}
}

/**
 * Implements hook_node_type_insert().
 */
function bc_views_node_type_insert($info) {
  if ($info->type == 'bc_views_solr_view') {
  	// dsm($info);
  }
}

function bc_views_node_view($node, $view_mode = 'full') {
	if ($node->type == 'bc_views_solr_view') {
		// Get our global variables.
		global $_bc_views_solr_view;

		// We're on a bc_views_solr_view page.
		$_bc_views_solr_view['view'] = TRUE;

		// This is a global variable - the user never has the opportunity to change this.
		foreach (field_get_items('node', $node, 'bc_views_query_facets') as $field) {
			$_bc_views_solr_view['facets'][] = $field['value'];
		}

		dsm_all_islandora_blocks();

		/*
		 * Fetch configured variables from the content page. 
		 * These variables the user **can** change, we store them globally as a 'backup' and/or as 
		 * a way to return to the original "collection view."
		 */
		$_bc_views_solr_view['facets'] = field_get_items('node', $node, 'bc_views_solr_query')[0]['value'];
		$_bc_views_solr_view['rows'] = field_get_items('node', $node, 'bc_views_query_rows')[0]['value'];

		// Configure the query, default page display and send in the cloneeeees!
		configure_query_and_page($_bc_views_solr_view['facets'], $_bc_views_solr_view['rows']);

		dsm($_bc_views_solr_view);
		// Send the SOLR query and prepare to display them in our content!
		$solr_result_output = islandora_solr();

		// Build the rest of our block's content - include the switch (list/grid) and sort blocks.
		$node->content['switch_block'] = array(
			'#markup' => block_content_render('islandora_solr', 'display_switch'),
			'#weight' => '1',	// DO WE WANT THESE ON THE SAME LINE?!
			);
		$node->content['sort_order_block'] = array(
			'#markup' => block_content_render('islandora_solr', 'sort'),
			'#weight' => '1', // DO WE WANT THESE ON THE SAME LINE?! (YES, BEN SAYS YES!)
			);
		$node->content['results'] = array(
			'#markup' => $solr_result_output,
			'#weight' => '5',
			);
	}
}

function configure_query_and_page($facets, $rows, $display = 'grid') {
	// Set the query as a param for the ISQP.
	!$_GET['f'] ? $_GET['f'][1] = $facets : NULL;
	
	// Set the result limit.
	!$_GET['solrLimit'] ? $_GET['solrLimit'] = $rows : NULL;
	
	// Set the result display type if the user has not selected one. 
	!$_GET['display'] ? $_GET['display'] = $display : NULL;
}

function bc_views_node_view_alter(&$build) {
	// dsm($build);
}

// UNUSED AT PRESENT
function bc_views_menu_breadcrumb_alter(&$active_trail, $item) {
	// dsm($active_trail);
	// dsm($item);
}

/*
 * Implements hook_block_list_alter().
 */
function bc_views_block_list_alter(&$blocks) {
	global $_bc_views_solr_view;
	// If it is not one of our UNIQUE queries, return;
	if (!$_bc_views_solr_view['view']) {
		return;
	}
	// Find the display_switch block that, for some unknown reason, is displayed on all pages on our site (or by default)
	// We do not want *this* display_switch block, since we've already render and add it to our pages ['content']!
	foreach($blocks as $block) {
		if($block->delta == 'display_switch') {
			unset($blocks[$block->bid]);
		}
	}

	/*
	 * ~~~~ SIDEBAR FIRST CONTENT ~~~~~
	 * We're going to add our sidebar content, mainly the *facet block* and *advanced search block* 
	 * Both of these are from the islandora_solr module.
	 *
	 * Though by default they _should_ display on SIDEBAR1, we're going to enforce that here.
	 * We're also going to ensure it users our GLOBAL theme... I'm not 100% if this is ness...
	 */
	$theme = $GLOBALS['theme'];
	$region = 'sidebar_first';

	$facets = block_load('islandora_solr', 'basic_facets');
	$facets->theme = $theme;
	$facets->region = $region;
	
	$advanced = block_load('islandora_solr', 'advanced');
	$advanced->theme = $theme;
	$advanced->region = $region;

	// SEND IN THE BLOOOOCCCKKKSSS! 
	$blocks[] = $facets;
	$blocks[] = $advanced;
}

// Generates a rendered block from $module with name $function.
function block_content_render($module, $function) {
	$block = block_load($module, $function);
	$block->theme = $GLOBALS['theme'];
	$render_block = _block_render_blocks(array($block));
	$build_block = _block_get_renderable_array($render_block);
	return drupal_render($build_block);
}

// Reports all islandora blocks available... I'm so lazy.
function dsm_all_islandora_blocks() {
	$islandoraBlocks = module_invoke('islandora_solr', 'block_info');
	dsm($islandoraBlocks);
}

function bc_views_form_islandora_solr_advanced_search_form_alter(&$form, &$form_state) {
	dsm($form);
	// Set the advanced form to preserve our filters - we will also use this later to modify the titles of this form.
  // TODO: Also might need to change the way the page redirects users...
	global $_bc_views_solr_view;
	// If it is not one of our UNIQUE queries, return;
	if (!$_bc_views_solr_view['view']) {
		return;
	}
	dsm('Altered to our search handler.');
	$form['#bc_views'] = TRUE;
	$form['#submit'][0] = 'bc_views_advanced_search_form_submit';
	//$form['#id'] = 'bc_views_advanced_search_form';

	dsm($form);
}

// This code is taken directly from the module islandora_solr_search, includes/blocks.inc (l~685)
// I've replaced the CONSTANT used as a redirect to keep us on our CUSTOM view page... 
// Many thanks to them.
/**
 * Islandora Solr advanced search form submit callback.
 *
 * @param array $form
 *   An associative array containing form structure.
 * @param array $form_state
 *   An associative array containing form state.
 *
 * @see islandora_solr_advanced_search_form()
 */
function bc_views_advanced_search_form_submit($form, &$form_state) {
  module_load_include('inc', 'islandora_solr', 'includes/utilities');
  dsm($form);
  dsm($form_state);
  // Collect query values.
  $query_array = array();
  foreach ($form_state['values']['terms'] as $term) {
    $field = $term['field'];
    $search = trim($term['search']);
    $search = islandora_solr_replace_slashes($search);
    $boolean = (isset($term['boolean'])) ? $term['boolean'] : variable_get('islandora_solr_search_boolean', 'user');
    $field = islandora_solr_lesser_escape($field);
    // Add query.
    if (!empty($search)) {
      $query_array[] = array(
        'search' => "$field:($search)",
        'boolean' => $boolean,
      );
    }
  }

  // Create query.
  $query = '';
  $i = 0;
  foreach ($query_array as $term) {
    $query .= $term['search'];
    if (count($query_array) - 1 != $i) {
      $query .= ' ' . $term['boolean'] . ' ';
    }
    $i++;
  }

  // Check if query is empty.
  if (empty($query)) {
    $query = '*:*';
  }

  $filter = isset($_GET['f']) ? $_GET['f'] : '';
  
  dsm($query);
  dsm($filter);

  return;
  // Navigate to results page.

  $form_state['redirect'] = array( current_path(), '');
}

// BEGIN ALL OF THE SOLR QUERY AND RESULT HOOKS WE MIGHT EVER WANT.

/**
 * Implements hook_islandora_solr_query().
 */
// function bc_views_islandora_solr_query($islandora_solr_query) {
// }

/**
 * Implements hook_islandora_solr_query_alter().
 * Modifies query before execution....
 */
function bc_views_islandora_solr_query_alter(&$islandora_solr_query) {
	global $_bc_views_solr_view;
	// If it is not one of our UNIQUE queries, return;
	if (!$_bc_views_solr_view['view']) {
		return;
	}

	global $_islandora_solr_queryclass;
	// I need to figure out pagination and why ROWS isn't restricting the results from SOLR. Fucked up...
	// This leads to pagination, not RESULT limits.
	$islandora_solr_query->solrLimit = $_islandora_solr_queryclass->internalSolrParams['solrLimit'];

	// Update facets to those selected...
	$islandora_solr_query->solrParams['facet.field'] = $_bc_views_solr_view['facets'];
}

// !!
// At this point the SOLR Query is executed!!!
// !!

/**
 * Implements hook_islandora_solr_query_result().
 */
// function bc_views_islandora_solr_query_result($result) {
// }

/**
 * Implements hook_islandora_solr_results_alter().
 */
// function bc_views_islandora_solr_results_alter(&$search_results, $query_processor) {
// }
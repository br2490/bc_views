<?php
/**
 * @file
 * Collection "views" via a custom content type.
 * 
 */
require_once dirname(__FILE__) . '/includes/content_view.inc'; // The display of our content type is here.
require_once dirname(__FILE__) . '/includes/search.inc'; // The modification of solr search/faceting is here.
require_once dirname(__FILE__) . '/includes/theme.inc'; // Themeing.
// Do I want to break breadcrumbs out for all of Barnard's site? New module?

// Content global.
$_bc_views_solr_view = array();

/**
 * Implements hook_node_info().
 * Define our content type.
 */
function bc_views_node_info() {
  $items = array(
    'bc_views_solr_view' => array(
      'name' => t('Barnard Collection View'), // Will refactor to Islandora Solr Content Collection (name still WIP)
      'base' => 'node_content',
      'description' => t('A content type to configure and display a collection by a specifying a SOLR query. <em>Collection</em> is used loosely, as these content pages may be curated exhibits, special projects, timely (or time-based) collections, etc.  '),
      'has_title' => '1',
      'title_label' => t('Collection Name (Page Name)'),
      'help' => t('Use this page to configure and display a collection by a specifying a SOLR query.<br> Use the <strong>Preview</strong> button to preview what the results from the SOLR query your specified.'),
      'custom' => '0',
    ),
  );
  drupal_alter('node_info', $items);
  return $items;
}

/**
 * Implements hook_form().
 */
function bc_views_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_form_alter()
 */
function bc_views_form_alter(&$form, $form_state, $form_id) {
  // dpm($form_id);
}



// UNUSED AT PRESENT
// function bc_views_menu_breadcrumb_alter(&$active_trail, $item) {
// 	// dpm($active_trail);
// 	// dpm($item);
// }

/**
 * Implements hook_islandora_breadcrumbs_alter().
 */
function bc_views_islandora_breadcrumbs_alter(&$breadcrumb, $context) {
	global $_bc_views_solr_view;

	// If it is not one of our unique queries, return;
	if (!$_bc_views_solr_view['view']) {
		return;
	}

	// If there aren't breadcrumbs from islandora to alter, return;
	if (count($breadcrumb) <= 1) {
		return;
	}

	$dom = new DOMDocument();
	$dom->loadHTML($breadcrumb[1]);
	$base_path = request_path();

	foreach ($dom->getElementsByTagName('a') as $link) {
		if ($link->nodeValue == '(x)') {
			$href_parts = explode('&', $link->getAttribute('href'));

			// If we got the wrong base paht, replace it.
			if (strpos($href_parts[0], $base_path) === FALSE) {
				unset($href_parts[0]);
				$new_href = '/' . $base_path . '?' . implode('&', $href_parts);
				$link->setAttribute('href', $new_href);
				$breadcrumb[1] = $dom->saveHTML();
			}
		}
	}
	// dpm($breadcrumb);
}

// /**
//  * Implements islandora_breadcrumbs_alter().
//  */
// function bc_views_islandora_breadcrumbs_alter(&$breadcrumb, $context) {
// 	foreach($breadcrumb as $pos => $crumb) {
// 		if((bool)strpos($crumb,'href="/node/%20?cq=')) {

// 			$substring_start = strpos($crumb,'/node/%20?cq=');
// 			$substring_end = strpos($crumb, '&amp;', $substring_start) + 5;

// 			$bad_string = substr($crumb, $substring_start, ($substring_end-$substring_start));
// 			$replacement = '/'. request_path() . '?';
// 			$newcrumb = str_replace($bad_string, $replacement, $crumb);

// 			$breadcrumb[$pos] = $newcrumb;
// 		}
// 	}
// }

// UNUSED AT PRESENT
function bc_views_islandora_solr_facet_bucket_classes_alter(&$attributes, $islandora_solr_query) {
	// dpm($attributes);
}

// function bc_views_block_view_alter(&$data, $block) {
// 	global $_bc_views_solr_view;
// 	if (!isset($_bc_views_solr_view)) {
// 		return;
// 	}
// }

/**
 * Reports all islandora blocks available... I'm so lazy. (DEVELOPMENT)
 */
function dpm_all_islandora_blocks() {
	$islandoraBlocks = module_invoke('islandora_solr', 'block_info');
	dpm($islandoraBlocks);
}
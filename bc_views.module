<?php
/**
 * @file
 * Collection "views" via a custom content type.
 */

require_once dirname(__FILE__) . '/includes/search.inc';

$_bc_views_solr_view = array();

/**
 * Implements hook_node_info().
 */
function bc_views_node_info() {
  $items = array(
    'bc_views_solr_view' => array(
      'name' => t('Barnard Collection View'),
      'base' => 'node_content',
      'description' => t('A content type to configure and display a collection by a specifying a SOLR query. <em>Collection</em> here is used loosely, as these pages may be curated exhibits, special projects, timely (or time-based) collections, etc.  '),
      'has_title' => '1',
      'title_label' => t('Collection Name (Page Name)'),
      'help' => t('Use this page to configure and display a collection by a specifying a SOLR query.<br><em>Collection</em> here is used loosely, as these pages may be curated exhibits, special projects, timely (or time-based) collections, etc. <br> Use the <strong>Preview</strong> button to preview what the page will look like with results from the SOLR query your specified.'),
      'custom' => '0',
    ),
  );
  drupal_alter('node_info', $items);
  return $items;
}

/**
 * Implements hook_form().
 */
function bc_views_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_form_alter()
 */
function bc_views_form_alter(&$form, $form_state, $form_id) {
  // dpm($form_id);
}

/**
 * Implements hook_form_BASE_ID_alter()
 */
// WILL BE USED TO REMOVE THE DATE PICKER....
function bc_views_form_islandora_solr_range_slider_form_alter(&$form, &$form_state) {
	// dpm($form);
}

function bc_views_node_view($node, $view_mode = 'full') {
	if ($node->type == 'bc_views_solr_view') {
		// dpm_all_islandora_blocks();

		// Get our global variables.
		global $_bc_views_solr_view;
		global $_islandora_solr_queryclass;

		// We're on a bc_views_solr_view page...
		$_bc_views_solr_view['view'] = TRUE;

		// This is a global variable - the user never has the opportunity to change this.
		// Configure our FACETS that will be displayed on the content page.
		foreach (field_get_items('node', $node, 'bc_views_query_facets') as $field) {
			$_bc_views_solr_view['facets'][] = $field['value'];
		}

		/*
		 * Fetch remaining configured variables for the content page. 
		 * These variables the user **can** change, we store them globally as a 'backup', as a way
		 * to return to the original "collection view," and also for use in our search handling... 
		 */
		$bc_views_solr_query = field_get_items('node', $node, 'bc_views_solr_query');
		$bc_views_query_rows = field_get_items('node', $node, 'bc_views_query_rows');
		$_bc_views_solr_view['content_query'] = $bc_views_solr_query[0]['value'];
		$_bc_views_solr_view['rows'] = $bc_views_query_rows[0]['value'];

		// We want to default to the grid view, but if the user selects something else 
		// we do not want to override them back to the grid view.
		$_GET['display'] = !isset($_GET['display']) ? 'grid' : NULL;

		// Send the solr query and prepare to display them in our content.
		// TO DO: Add a catch for results == 0 to return to default collection view, with a prompt.
		if (!in_array('cq', array_keys(drupal_get_query_parameters()))) {
			$solr_result_output = islandora_solr();
		}
		else {
			$query_params = drupal_get_query_parameters();
			$collection_query = $query_params['cq'];
			$solr_result_output = islandora_solr($collection_query);
		}

		// Build the rest of our block's content - include the switch (list/grid) and sort blocks.
		$node->content['sort_order_block'] = array(
			'#markup' => block_content_render('islandora_solr', 'sort'),
			'#weight' => '2',
			);

		$node->content['switch_block'] = array(
			'#markup' => block_content_render('islandora_solr', 'display_switch'),
			'#weight' => '2',
			);


		$node->content['results'] = array(
			'#markup' => $solr_result_output,
			'#weight' => '3',
		);
	}
}

// UNUSED AT PRESENT
// function bc_views_menu_breadcrumb_alter(&$active_trail, $item) {
// 	// dpm($active_trail);
// 	// dpm($item);
// }

/*
 * Implements hook_block_list_alter().
 */
function bc_views_block_list_alter(&$blocks) {
	global $_bc_views_solr_view;
	global $theme_key;

	// If it is not one of our unique queries, return;
	if (!$_bc_views_solr_view['view']) {
		return;
	}

	// Find the display_switch block that, for some unknown reason, is 
	// displayed on all pages on our site (or by default)
	// We do not want *this* display_switch block, since 
	// we've already render and add it to our pages ['content'].
	foreach($blocks as $block) {
		if($block->delta == 'display_switch') {
			unset($blocks[$block->bid]);
		}
	}

	// We're going to add our sidebar content, mainly the facet block and
  // advanced search block. Both of these are from the islandora_solr module.
  $region = 'sidebar_first';
  $additional_blocks = array(
  	'islandora_solr' => array(
  		'advanced' => array(
  			'title' => 'Search this collection',
        'region' => 'sidebar_first',
        'weight' => 0,
      ),
      'basic_facets' => array(
        'title' => 'Filter this collection',
        'region' => 'sidebar_first',
        'weight' => 1,
      ),
		),
	);

	// Fetch the additional blocks, setting the theme, region and weight.	
	foreach ($additional_blocks as $module_name => $addl_block) {
		foreach ($addl_block as $bid => $block_info) {
      $block = block_load($module_name, $bid);
      $block->theme = $theme_key;
      $block->title = $block_info['title'];
      $block->region = $block_info['region'];
      $block->weight = $block_info['weight'];
      $blocks[] = $block;
		}
	}

  // Sort the blocks
  usort($blocks, "custom_sort");
}

/**
 * Sorting function for blocks as objects. Why drupal only has sort functions for arrays is beyond me...
 */
function custom_sort($a,$b) {
  return $a->weight>$b->weight;
}

function bc_views_islandora_breadcrumbs_alter(&$breadcrumb, $context) {
	dpm($breadcrumb);
	$breadcrumb = str_replace('href="/node/%20?cq', 'href=/' . current_path() . '?cq', $breadcrumb);
	//return $breadcrumb;
}


// function bc_views_block_view_alter(&$data, $block) {
// 	global $_bc_views_solr_view;
// 	if (!isset($_bc_views_solr_view)) {
// 		return;
// 	}
// }

/**
 * Generates a rendered block from $module with name $function.
 */
function block_content_render($module, $function) {
	$block = block_load($module, $function);
	$block_renderable = _block_get_renderable_array(_block_render_blocks(array($block)));
	$render = drupal_render($block_renderable);
	return $render;	
}

/**
 * Reports all islandora blocks available... I'm so lazy. (DEVELOPMENT)
 */
function dpm_all_islandora_blocks() {
	$islandoraBlocks = module_invoke('islandora_solr', 'block_info');
	dpm($islandoraBlocks);
}
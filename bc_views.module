<?php
$_bc_views_solr_view = array();
/**
 * Implements hook_node_info().
 */
function bc_views_node_info() {
  $items = array(
    'bc_views_solr_view' => array(
      'name' => t('Barnard Collection View'),
      'base' => 'node_content',
      'description' => t('A content type to configure and display a collection by a specifying a SOLR query. <em>Collection</em> here is used loosely, as these pages may be curated exhibits, special projects, timely (or time-based) collections, etc.  '),
      'has_title' => '1',
      'title_label' => t('Collection Name (Page Name)'),
      'help' => t('Use this page to configure and display a collection by a specifying a SOLR query.<br><em>Collection</em> here is used loosely, as these pages may be curated exhibits, special projects, timely (or time-based) collections, etc. <br> Use the <strong>Preview</strong> button to preview what the page will look like with results from the SOLR query your specified.'),
      'custom' => '0',
    ),
  );
  drupal_alter('node_info', $items);
  return $items;
}

## REGION TEMPORARY SEARCH TESTING
// This is a temporary search block in an attempt to get SOLR working with our current setup.
function bc_views_search_form($form, &$form_state) {
  $form['bc_views_search'] = array(
  	'#type' => 'container',
    '#attributes' => array(
      	'class' => array(
        'container-inline',
      ),
    ),
  );
  $form['bc_views_search']["query"] = array(
    '#size' => '15',
    '#type' => 'textfield',
    '#title' => t('Search: '),
    // @todo Should this be the searched value?
    '#default_value' => '',
  );
  $form['bc_views_search']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go!'),
  );

  return $form;
}

function bc_views_search_form_submit($form, &$form_state) {
	global $_islandora_solr_queryclass; 
	global $_bc_views_solr_view;

	$search_string = islandora_solr_replace_slashes($form_state['values']['query']);

	$params = isset($_islandora_solr_queryclass->internalSolrParams) ? $_islandora_solr_queryclass->internalSolrParams : array();

	$query = array_merge($params, array('cq' => $search_string));

  $form_state['redirect'] = array(
    current_path(), 
    array(
      'query' => $query,
    ),
  );
}
## END REGION TEMPORARY SEARCH TESTING

/**
 * Implements hook_form()
 */
function bc_views_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_form_alter()
 */
function bc_views_form_alter(&$form, $form_state, $form_id) {
	if ($form_id == 'bc_views_solr_view_node_form') {
	}
}

/**
 * Implements hook_node_type_insert().
 */
function bc_views_node_type_insert($info) {
  if ($info->type == 'bc_views_solr_view') {
  	// dsm($info);
  }
}

function bc_views_node_view($node, $view_mode = 'full') {
	if ($node->type == 'bc_views_solr_view') {
		// Get our global variables.
		global $_bc_views_solr_view;
		global $_islandora_solr_queryclass;

		// We're on a bc_views_solr_view page...
		$_bc_views_solr_view['view'] = TRUE;

		// This is a global variable - the user never has the opportunity to change this.
		// Configure our FACETS that will be displayed on the content page.
		foreach (field_get_items('node', $node, 'bc_views_query_facets') as $field) {
			$_bc_views_solr_view['facets'][] = $field['value'];
		}

		/*
		 * Fetch remaining configured variables for the content page. 
		 * These variables the user **can** change, we store them globally as a 'backup', as a way
		 * to return to the original "collection view," and also for use in our search handling... 
		 */
		$_bc_views_solr_view['content_query'] = field_get_items('node', $node, 'bc_views_solr_query')[0]['value'];
		$_bc_views_solr_view['rows'] = field_get_items('node', $node, 'bc_views_query_rows')[0]['value'];
		
		// We want to default to the grid view, but if the user selects something else 
		// we do not want to override them back to the grid view.
		!isset($_GET['display']) ? $_GET['display'] = 'grid' : NULL;

		// Send the SOLR query and prepare to display them in our content!
		if (!isset(drupal_get_query_parameters()['cq'])) { // Check for a user COLLECTION QUERY (cq)
			$solr_result_output = islandora_solr();
		}
		else {
			$collection_query = drupal_get_query_parameters()['cq'];
			$solr_result_output = islandora_solr("catch_all_fields_mt:($collection_query)");
		}

		// Build the rest of our block's content - include the switch (list/grid) and sort blocks.
		$node->content['switch_block'] = array(
			'#markup' => block_content_render('islandora_solr', 'display_switch'),
			'#weight' => '1',	// DO WE WANT THESE ON THE SAME LINE?!
			);
		$node->content['sort_order_block'] = array(
			'#markup' => block_content_render('islandora_solr', 'sort'),
			'#weight' => '1', // DO WE WANT THESE ON THE SAME LINE?! (YES, BEN SAYS YES!)
			);
		$node->content['results'] = array(
			'#markup' => $solr_result_output,
			'#weight' => '5',
			);
		// TEMPORARY SEARCH TESTING
		$search_form = drupal_get_form('bc_views_search_form');
		$node->content['search_box'] = array(
			'#markup' => drupal_render($search_form),
			'#weight' => '6',
			);
	}
}


// UNUSED AT PRESENT
function bc_views_menu_breadcrumb_alter(&$active_trail, $item) {
	// dsm($active_trail);
	// dsm($item);
}

/*
 * Implements hook_block_list_alter().
 */
function bc_views_block_list_alter(&$blocks) {
	global $_bc_views_solr_view;
	// If it is not one of our UNIQUE queries, return;
	if (!$_bc_views_solr_view['view']) {
		return;
	}
	// Find the display_switch block that, for some unknown reason, is displayed on all pages on our site (or by default)
	// We do not want *this* display_switch block, since we've already render and add it to our pages ['content']!
	foreach($blocks as $block) {
		if($block->delta == 'display_switch') {
			unset($blocks[$block->bid]);
		}
	}

	/*
	 * ~~~~ SIDEBAR FIRST CONTENT ~~~~~
	 * We're going to add our sidebar content, mainly the *facet block* and *advanced search block* 
	 * Both of these are from the islandora_solr module.
	 *
	 * Though by default they _should_ display on SIDEBAR1, we're going to enforce that here.
	 * We're also going to ensure it users our GLOBAL theme... I'm not 100% if this is ness...
	 */
	$theme = $GLOBALS['theme'];
	$region = 'sidebar_first';

	$facets = block_load('islandora_solr', 'basic_facets');
	$facets->theme = $theme;
	$facets->region = $region;
	
	$advanced = block_load('islandora_solr', 'advanced');
	$advanced->theme = $theme;
	$advanced->region = $region;

	$current_query = block_load('islandora_solr', 'current_query');
	$current_query->theme = $theme;
	$current_query->region = $region;

	// SEND IN THE BLOOOOCCCKKKSSS! 
	$blocks[] = $facets;
	$blocks[] = $advanced;
	$blocks[] = $current_query;
}

// Generates a rendered block from $module with name $function.
function block_content_render($module, $function) {
	$block = block_load($module, $function);
	$block->theme = $GLOBALS['theme'];
	$render_block = _block_render_blocks(array($block));
	$build_block = _block_get_renderable_array($render_block);
	return drupal_render($build_block);
}

// Reports all islandora blocks available... I'm so lazy.
function dsm_all_islandora_blocks() {
	$islandoraBlocks = module_invoke('islandora_solr', 'block_info');
	dsm($islandoraBlocks);
}

// BEGIN ALL OF THE SOLR QUERY AND RESULT HOOKS WE MIGHT EVER WANT.

/**
 * Implements hook_islandora_solr_query().
 */
function bc_views_islandora_solr_query($islandora_solr_query) {
	global $_bc_views_solr_view;
	if (!$_bc_views_solr_view['view']) {
		return;
	}

	/* Has the user entered a search term? Here is where we modify our Collection View...
	 * Formost we need to find if any string were used in the SOLR FQ, and change them to tokenized fields (i.e. 'ms' becomes 'mt')
	 * Then we set our Solr Query to the user's term with a CATCH_ALL so we get as much for our search as possible.
	 * Finally, we return the ISQP and stop the function from continuing.
	 */
	if (isset(drupal_get_query_parameters()['cq'])) {

		// Tokenize and set field query limiter
		$content_query = str_replace('_ms:', '_mt:', $_bc_views_solr_view['content_query']);
		$islandora_solr_query->solrParams['fq'][] = $content_query;

		// Do our thang...
		return $islandora_solr_query;
	} 

	// Set field query limiter.
	$islandora_solr_query->solrParams['fq'][] = $_bc_views_solr_view['content_query'];
	
	return $islandora_solr_query;
}

/**
 * Implements hook_islandora_solr_query_alter().
 * Modifies query before execution....
 */
function bc_views_islandora_solr_query_alter(&$islandora_solr_query) {
	global $_bc_views_solr_view;

	// If it is not one of our UNIQUE queries, return;
	if (!$_bc_views_solr_view['view']) {
		return;
	}

	// I need to figure out pagination and why ROWS isn't restricting the results from SOLR. Fucked up...
	// This leads to pagination, not RESULT limits.
	$islandora_solr_query->solrLimit = $_bc_views_solr_view['rows'];

	// Update facets to only those selected...
	$islandora_solr_query->solrParams['facet.field'] = $_bc_views_solr_view['facets'];

	dsm($islandora_solr_query);
}

// !!
// At this point the SOLR Query is executed!!!
// !!

/**
 * Implements hook_islandora_solr_query_result().
 */
// function bc_views_islandora_solr_query_result($result) {
// }

/**
 * Implements hook_islandora_solr_results_alter().
 */
// function bc_views_islandora_solr_results_alter(&$search_results, $query_processor) {
// }

/**
 * Implements hook_form_FORM_ID_alter()
 * Used to remove datepicker JS.
 */
function bc_views_form_islandora_solr_date_filter_form_alter(&$form, &$form_state) {
	unset($form['#attached']);
}
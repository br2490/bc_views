<?php
/**
 * @file
 * Collection "views" via a custom content type.
 * 
 */
require_once dirname(__FILE__) . '/includes/content_view_modification.inc';
require_once dirname(__FILE__) . '/includes/search.inc';
require_once dirname(__FILE__) . '/includes/theme.inc';

// Content global.
$_bc_views_solr_view = array();

/**
 * Implements hook_node_info().
 * Define our content type.
 */
function bc_views_node_info() {
  $items = array(
    'bc_views_solr_view' => array(
      'name' => t('Barnard Collection View'),
      'base' => 'node_content',
      'description' => t('A content type to configure and display a collection by a specifying a SOLR query. <em>Collection</em> here is used loosely, as these pages may be curated exhibits, special projects, timely (or time-based) collections, etc.  '),
      'has_title' => '1',
      'title_label' => t('Collection Name (Page Name)'),
      'help' => t('Use this page to configure and display a collection by a specifying a SOLR query.<br><em>Collection</em> here is used loosely, as these pages may be curated exhibits, special projects, timely (or time-based) collections, etc. <br> Use the <strong>Preview</strong> button to preview what the results from the SOLR query your specified.'),
      'custom' => '0',
    ),
  );
  drupal_alter('node_info', $items);
  return $items;
}

/**
 * Implements hook_form().
 */
function bc_views_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_form_alter()
 */
function bc_views_form_alter(&$form, $form_state, $form_id) {
  // dpm($form_id);
}

/**
 * Implements hook_node_view()
 * This is where we display our content type to the end-user.
 */

function bc_views_node_view($node, $view_mode = 'full') {
	if ($node->type == 'bc_views_solr_view') {
		// dpm_all_islandora_blocks(); // development only, remove me.

		// Get our global variables.
		global $_bc_views_solr_view;
		global $_islandora_solr_queryclass;

		// We're on a bc_views_solr_view page...
		$_bc_views_solr_view['view'] = TRUE;

		// These are our content variables that the end-user has little interaction with, ever. 
		// These DEFINE what is present on the collection page, and also help us with search.
		// Everything gets saved in the content's global for reasons ('reasons...')
		// Configure our FACETS that will be displayed on the content page.
		foreach (field_get_items('node', $node, 'bc_views_query_facets') as $field) {
			$_bc_views_solr_view['facets'][] = $field['value'];
		}

		$bc_views_solr_query = field_get_items('node', $node, 'bc_views_solr_query');
		$bc_views_query_rows = field_get_items('node', $node, 'bc_views_query_rows');
		
		$_bc_views_solr_view['content_query'] = $bc_views_solr_query[0]['value'];
		$_bc_views_solr_view['rows'] = $bc_views_query_rows[0]['value'];

		// For our content type, we want to default to the grid view, but if the user selects 
		// something else we do not want to override them back to the grid view.
		!isset($_GET['display']) ? $_GET['display'] = 'grid' : NULL;

		// The important stuff:
		// Foremost we rely on islandora_solr() to return a search result - that will be our content.
		// This reliance on islandora_solr let us do amazing things fairly simply.
		// We use a param called "cq" if the user has preformed a search from our collection page.		
		if (!in_array('cq', array_keys(drupal_get_query_parameters()))) {
			$solr_result_output = islandora_solr();
		}
		else {
			$query_params = drupal_get_query_parameters();
			$collection_query = $query_params['cq'];
			$solr_result_output = islandora_solr($collection_query);
			// @TODO: Add a catch for results == 0 to return to default collection view, with a prompt.
		}


		// Build the rest of our block's content - include the switch (list/grid) and sort blocks.
		$node->content['sort_order_block'] = array(
			'#markup' => block_content_render('islandora_solr', 'sort'),
			'#weight' => '2',
			);

		$node->content['switch_block'] = array(
			'#markup' => block_content_render('islandora_solr', 'display_switch'),
			'#weight' => '2',
			);

		$node->content['results'] = array(
			'#markup' => $solr_result_output,
			'#weight' => '3',
		);

	}
}

// UNUSED AT PRESENT
// function bc_views_menu_breadcrumb_alter(&$active_trail, $item) {
// 	// dpm($active_trail);
// 	// dpm($item);
// }

/**
 * Implements hook_islandora_breadcrumbs_alter().
 */
function bc_views_islandora_breadcrumbs_alter(&$breadcrumb, $context) {
	global $_bc_views_solr_view;

	// If it is not one of our unique queries, return;
	if (!$_bc_views_solr_view['view']) {
		return;
	}

	// If there aren't breadcrumbs from islandora to alter, return;
	if (count($breadcrumb) <= 1) {
		return;
	}

	$dom = new DOMDocument();
	$dom->loadHTML($breadcrumb[1]);
	$base_path = request_path();

	foreach ($dom->getElementsByTagName('a') as $link) {
		if ($link->nodeValue == '(x)') {
			$href_parts = explode('&', $link->getAttribute('href'));

			// If we got the wrong base path, replace it.
			if (strpos($href_parts[0], $base_path) === FALSE) {
				unset($href_parts[0]);
				$new_href = '/' . $base_path . '?' . implode('&', $href_parts);
				$link->setAttribute('href', $new_href);
				$breadcrumb[1] = $dom->saveHTML();
			}
		}
	}
	dpm($breadcrumb);
}

// UNUSED AT PRESENT
function bc_views_islandora_solr_facet_bucket_classes_alter(&$attributes, $islandora_solr_query) {
	// dpm($attributes);
}

// function bc_views_block_view_alter(&$data, $block) {
// 	global $_bc_views_solr_view;
// 	if (!isset($_bc_views_solr_view)) {
// 		return;
// 	}
// }

/**
 * Reports all islandora blocks available... I'm so lazy. (DEVELOPMENT)
 */
function dpm_all_islandora_blocks() {
	$islandoraBlocks = module_invoke('islandora_solr', 'block_info');
	dpm($islandoraBlocks);
}
<?php

/**
 * Implements hook_node_info().
 */
function bc_views_node_info() {
  $items = array(
    'bc_views_solr_view' => array(
      'name' => t('Barnard Collection View'),
      'base' => 'node_content',
      'description' => t('A content type to configure and display a collection by a specifying a SOLR query. <em>Collection</em> here is used loosely, as these pages could be curated exhibits, special projects, timely (or time-based) collections, etc.  '),
      'has_title' => '1',
      'title_label' => t('Collection Name'),
      'help' => t('The title of the collection, displayed at the top of the page.'),
    ),
  );
  drupal_alter('node_info', $items);
  return $items;
}

/**
 * Implement hook_form()
 */
function bc_views_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

/**
 * Implements hook_node_type_insert().
 */
function bc_views_node_type_insert($info) {
  if ($info->type == 'bc_views_solr_view') {
  	dsm('node-type-insert');
  	dsm($info);
  }
}

function bc_views_node_view($node, $view_mode, $langcode) {
	if ($node->type == 'bc_views_solr_view') {
			//islandoraBlocks();

			$get_query = field_get_items('node', $node, 'bc_views_solr_query');
			$query = $get_query[0]['value'];

			blockDefaultView();
			
			$solrResultContent = islandora_solr($query, NULL);

			//$switchBlock = blockContentRenderer('islandora_solr', 'display_switch');
			//$sortBlock = blockContentRenderer('islandora_solr', 'sort');

			$node->content['results'] = array(
				'#markup' => $solrResultContent,
				'weight' => '2',
				);

			dsm($node);
	}
  // $node->content['my_additional_field'] = array(
  //   '#markup' => $additional_field,
  //   '#weight' => 10,
  //   '#theme' => 'mymodule_my_additional_field',
  // );
}

function bc_views_node_view_alter(&$build) {
	dsm($build);
}

/**
 * Implements hook_block_info().
 */
function bc_views_block_info() {
 	$blocks['bc_views_solr_query_results'] = array( 
 		'info' => t('Barnard Custom View'),
 		'status' => TRUE,
		'region' => 'content',
		'visibility' => BLOCK_VISIBILITY_LISTED,
		'pages' => '',
 	);
 	return $blocks;
}

/**
 * Implements hook_block_save(). (UNUSED AT PRESENT)
 */
function bc_views_block_save($delta = '', $edit = array()) {
	$prefix = 'bc_views';
	if (stripos($delta, $prefix) !== FALSE) {
		dsm($edit);
	}
}

/**
 * Implements hook_block_view().
 */
function bc_views_block_view($delta = '') {
	$block = array();
	switch ($delta) {

		// Yearbook View
		case 'bc_views_solr_query_results' :
			blockDefaultView();
			
			$query = 'mods_relatedItem_host_titleInfo_title_ms%3A"Mortarboard" AND RELS_EXT_isMemberOf_uri_ms%3A"info:fedora/islandora:bookCollection"';
			$solrResultContent = islandora_solr($query, NULL);

			$switchBlock = blockContentRenderer('islandora_solr', 'display_switch');
			$sortBlock = blockContentRenderer('islandora_solr', 'sort');

			$block['content'] .= $sortBlock . $switchBlock;			
			$block['content'] .= $solrResultContent;
		break;
	}
	return $block;
}

function bc_views_menu_breadcrumb_alter(&$active_trail, $item) {
	// dsm($active_trail);
	// dsm($item);
}

function bc_views_block_list_alter(&$blocks) {
	
	// dsm($GLOBALS['_islandora_solr_queryclass']);

	if ($GLOBALS['_islandora_solr_queryclass']->solrParams['bc_views']) {
		// SIDEBAR 1 CONTENT
		$facets = block_load('islandora_solr', 'basic_facets');
		$facets->theme=$GLOBALS['theme'];
		$advanced = block_load('islandora_solr', 'advanced');
		$advanced->theme=$GLOBALS['theme'];
		$blocks[] = $facets;
		$blocks[] = $advanced;
	}
	dsm($blocks);
}

function blockDefaultView() {
	// this should be a variable lookup eventually.
	// vget whatever, default=>'grid';
	if (!$_GET['display']) { $_GET['display']='grid'; }
}

// Generates a rendered block from $module with name $functionName.
function blockContentRenderer($module, $functionName) {
	$getBlock = block_load($module, $functionName);
	$getBlock->theme = $GLOBALS['theme'];
	$blockRenderBlock = _block_render_blocks(array($getBlock));
	$blockRenderBuild = _block_get_renderable_array($blockRenderBlock);
	$blockRendered = drupal_render($blockRenderBuild);
	return $blockRendered;
}

// Reports all islandora blocks available... I'm lazy.
function islandoraBlocks() {
	$islandoraBlocks = module_invoke('islandora_solr', 'block_info');
	dsm($islandoraBlocks);
}


// BEGIN ALL OF THE SOLR QUERY AND RESULT HOOKS WE MIGHT EVER WANT.

/**
 * Implements hook_islandora_solr_query().
 */
// function bc_views_islandora_solr_query($islandora_solr_query) {
// }

/**
 * Implements hook_islandora_solr_query_alter().
 * Using this hook to switch around the actual SOLR query: q = fq and iq = *:* so q = isempty();
 */
function bc_views_islandora_solr_query_alter(&$islandora_solr_query) {
	// If we're on an islandora/search page don't modify the query.
	// Reduce nesting.
	if (strpos(request_path(),'islandora/search/') !== FALSE) {
		return; //die
	} 
	// Otherwise assume we're on one of our custom landing pages (this is a dangerous assumption but it works for now)
	// Something to think about: leave solr_query alone unless has no matching solr configuration. 
	$islandora_solr_query->solrLimit = '8'; // WHY DO YOU DISRESPECT THIS VARIABLE?! WHY!?!?!?!?!?!?!
	$islandora_solr_query->solrParams['fq'][] = $islandora_solr_query->solrQuery;
	$islandora_solr_query->internalSolrQuery = '*:*';
	$islandora_solr_query->solrQuery = '';
	$islandora_solr_query->solrParams['bc_views'] = TRUE;
	// dsm($islandora_solr_query);
}

// !!
// At this point the SOLR Query is executed!!!
// !!

/**
 * Implements hook_islandora_solr_query_result().
 */
// function bc_views_islandora_solr_query_result($result) {
// }

/**
 * Implements hook_islandora_solr_results_alter().
 */
// function bc_views_islandora_solr_results_alter(&$search_results, $query_processor) {
// }